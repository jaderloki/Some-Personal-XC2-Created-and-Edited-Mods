class X2Ability_CovertOp extends X2Ability_DefaultAbilitySet;

static function array<X2DataTemplate> CreateTemplates()
{
	local array<X2DataTemplate> Templates;
	
	Templates.AddItem(CovertPhantom());
	Templates.AddItem(AddCovertObjectiveHackAbility('Hack_CovertObjectiveChest'));
	
	return Templates;
}

//******** Hack Objective Ability **********
static function X2AbilityTemplate AddCovertObjectiveHackAbility(optional name TemplateName)
{
	local X2AbilityTemplate AbilityTemplate;
	local X2Condition_UnitValue					UnitValue;
	AbilityTemplate = AddHackAbility(TemplateName);
	AbilityTemplate.AbilityIconColor = class'UIUtilities_Colors'.const.OBJECTIVEICON_HTML_COLOR;
	AbilityTemplate.ShotHUDPriority = class'UIUtilities_Tactical'.const.OBJECTIVE_INTERACT_PRIORITY;

	// This ability is only valid if this is the covert op
	UnitValue = new class'X2Condition_UnitValue';
	UnitValue.AddCheckValue('IsCovertOp', 1, eCheck_Exact);
	AbilityTemplate.AbilityShooterConditions.AddItem(UnitValue);

	return AbilityTemplate;
}

static function X2AbilityTemplate CovertPhantom()
{
	local X2AbilityTemplate						Template;
	local X2Effect_Persistent                   Effect;
	local X2Condition_UnitValue					UnitValue;
	local X2Effect_PersistentStatChange DetectionReductionEffect;
	`CREATE_X2ABILITY_TEMPLATE(Template, 'RM_CovertPhantom');

	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;
	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_phantom";

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.UnitPostBeginPlayTrigger);

	// This ability is only valid if this is the covert op
	UnitValue = new class'X2Condition_UnitValue';
	UnitValue.AddCheckValue('IsCovertOp', 0, eCheck_GreaterThan);
	Template.AbilityShooterConditions.AddItem(UnitValue);

	Effect = new class'X2Effect_StayConcealed';
	Effect.BuildPersistentEffect(1, true, false);
	Effect.SetDisplayInfo(ePerkBuff_Passive, Template.LocFriendlyName, Template.GetMyLongDescription(), Template.IconImage,,,Template.AbilitySourceName);
	Template.AddTargetEffect(Effect);


		
	DetectionReductionEffect = new class'X2Effect_PersistentStatChange';
	DetectionReductionEffect.BuildPersistentEffect(3, false, true, , eGameRule_PlayerTurnBegin);
	//DetectionReductionEffect.SetDisplayInfo(ePerkBuff_Passive, Template.LocFriendlyName, Template.LocLongDescription, Template.IconImage, true, , Template.AbilitySourceName);
	DetectionReductionEffect.AddPersistentStatChange(eStat_DetectionModifier, 1.0f);
	Template.AddTargetEffect(DetectionReductionEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	//  NOTE: No visualization on purpose!

	Template.bCrossClassEligible = false;
//BEGIN AUTOGENERATED CODE: Template Overrides 'Phantom'
	Template.AbilityConfirmSound = "TacticalUI_ActivateAbility";
//END AUTOGENERATED CODE: Template Overrides 'Phantom'

	return Template;
}